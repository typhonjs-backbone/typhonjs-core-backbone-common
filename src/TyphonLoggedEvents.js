'use strict';

import _       from 'underscore';
import Events  from 'backbone-es6/src/Events.js';

import logger  from 'logger';

/**
 * TyphonEvents adds new functionality for trigger events. The following are new trigger mechanisms:
 *
 * Please refer to the Events documentation for all inherited functionality.
 *
 * `triggerDefer` - Defers invoking `trigger`.
 *
 * `triggerFirst` - Only invokes the first target matched and passes back any result to the callee.
 *
 * `triggerResults` - Invokes all targets matched and passes back an array of results in an array to the callee.
 *
 * `triggerThen` - Invokes all targets matched and adds any returned promises through Promise.all which returns
 *  a single promise to the callee.
 */
export default class TyphonLoggedEvents extends Events
{
   /**
    * Constructs TyphonLoggedEvents and sets the default log level to `debug`.
    */
   constructor()
   {
      super();

      this._logLevel = 'debug';
   }

   /**
    * Returns the current log level.
    *
    * @returns {string|*}
    */
   getLogLevel()
   {
      return this._logLevel;
   }

   /**
    * Sets the current log level.
    *
    * @param {string}   logLevel - The log level to set.
    */
   setLogLevel(logLevel)
   {
      this._logLevel = logLevel;
   }

   /**
    * Defers invoking `trigger`.
    */
   triggerDefer()
   {
      setTimeout(() => { this.trigger(...arguments); }, 0);
   }

   /**
    * Posts a log message given the current log level then invokes `trigger`.
    */
   trigger()
   {
      logger.post(this._logLevel, ...arguments);

      super.trigger(...arguments);
   }

   /**
    * Posts a log message given the current log level.
    *
    * Provides `trigger` functionality that only invokes the first target matched and passes back any result to
    * the callee.
    *
    * @returns {*}
    */
   triggerFirst()
   {
      logger.post(this._logLevel, ...arguments);

      return super.triggerFirst(...arguments);
   }

   /**
    * Posts a log message given the current log level.
    *
    * Provides `trigger` functionality, but collects any returned results from invoked targets in an array and passes
    * back this array to the callee.
    *
    * @returns {Array<*>}
    */
   triggerResults()
   {
      logger.post(this._logLevel, ...arguments);

      return super.triggerResults(...arguments);
   }

   /**
    * Posts a log message given the current log level.
    *
    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a
    * single Promise generated by `Promise.all`. This is a very useful mechanism to invoke asynchronous operations
    * over an eventbus.
    *
    * @returns {Promise}
    */
   triggerThen()
   {
      logger.post(this._logLevel, ...arguments);

      return super.triggerThen(...arguments);
   }
}