'use strict';

import TyphonEvents  from './TyphonEvents.js';

import logger        from 'logger';

/**
 * TyphonLoggedEvents posts a message to the `logger` before invoking the parent TyphonEvents method.
 *
 * Adds new functionality for trigger events. The following are new trigger mechanisms:
 *
 * Please refer to the Events documentation for all inherited functionality.
 *
 * `triggerDefer` - Defers invoking `trigger`.
 *
 * `triggerFirst` - Only invokes the first target matched and passes back any result to the callee.
 *
 * `triggerResults` - Invokes all targets matched and passes back an array of results in an array to the callee.
 *
 * `triggerThen` - Invokes all targets matched and adds any returned promises through Promise.all which returns
 *  a single promise to the callee.
 */
export default class TyphonLoggedEvents extends TyphonEvents
{
   /**
    * Constructs TyphonLoggedEvents and sets the default log level to `debug` and the eventbusName to 'unknown`.
    */
   constructor()
   {
      super();

      this._logLevel = 'debug';
      this._eventbusName = 'unknown';
   }

   /**
    * Returns the current eventbusName.
    *
    * @returns {string|*}
    */
   getEventbusName()
   {
      return this._eventbusName;
   }

   /**
    * Returns the current log level.
    *
    * @returns {string|*}
    */
   getLogLevel()
   {
      return this._logLevel;
   }

   /**
    * Sets the eventbus name.
    *
    * @param {string}   name - The name for this eventbus.
    */
   setEventbusName(name)
   {
      this._eventbusName = name;
   }

   /**
    * Sets the current log level.
    *
    * @param {string}   logLevel - The log level to set.
    */
   setLogLevel(logLevel)
   {
      this._logLevel = logLevel;
   }

   /**
    * Defers invoking `trigger`.
    *
    * @returns {TyphonLoggedEvents}
    */
   triggerDefer()
   {
      setTimeout(() => { this.trigger(...arguments); }, 0);

      return this;
   }

   /**
    * Posts a log message given the current log level.
    *
    * Trigger callbacks for the given event, or space-delimited list of events. Subsequent arguments to trigger will be
    * passed along to the event callbacks.
    *
    * @see http://backbonejs.org/#Events-trigger
    *
    * @param {string}   name  - Event name(s)
    * @returns {TyphonLoggedEvents}
    */
   trigger(name)
   {
      const params = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : undefined;

      logger.post(this._logLevel, { busName: this._eventbusName, eventName: name, params });

      return super.trigger(...arguments);
   }

   /**
    * Posts a log message given the current log level.
    *
    * Provides `trigger` functionality that only invokes the first target matched and passes back any result to
    * the callee.
    *
    * @param {string}   name  - Event name(s)
    * @returns {*}
    */
   triggerFirst(name)
   {
      const params = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : undefined;

      logger.post(this._logLevel, { busName: this._eventbusName, eventName: name, params });

      return super.triggerFirst(...arguments);
   }

   /**
    * Posts a log message given the current log level.
    *
    * Provides `trigger` functionality, but collects any returned results from invoked targets in an array and passes
    * back this array to the callee.
    *
    * @param {string}   name  - Event name(s)
    * @returns {Array<*>}
    */
   triggerResults(name)
   {
      const params = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : undefined;

      logger.post(this._logLevel, { busName: this._eventbusName, eventName: name, params });

      return super.triggerResults(...arguments);
   }

   /**
    * Posts a log message given the current log level.
    *
    * Provides `trigger` functionality, but collects any returned Promises from invoked targets and returns a
    * single Promise generated by `Promise.all`. This is a very useful mechanism to invoke asynchronous operations
    * over an eventbus.
    *
    * @param {string}   name  - Event name(s)
    * @returns {Promise}
    */
   triggerThen(name)
   {
      const params = arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : undefined;

      logger.post(this._logLevel, { busName: this._eventbusName, eventName: name, params });

      return super.triggerThen(...arguments);
   }
}